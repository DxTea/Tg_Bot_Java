package Games;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * –í–∏—Å–µ–ª–∏—Ü–∞
 */
public class Hangman implements Game {
    private static final char HIDDEN_WORD = '_';
    private static boolean ext = false;
    private int lives = 5;
    private final String secret;
    private final List<Character> progress;
    private final List<Character> mistakes;

    /**
     * –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     * @param word –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
     */
    public Hangman(String word) {
        secret = word.toLowerCase();
        progress = new ArrayList<>();
        for (int i = 0; i < secret.length(); i++) {
            progress.add(HIDDEN_WORD);
        }
        mistakes = new ArrayList<>();
    }

    /**
     * –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã
     */
    private static final String[] words = {
            "–ø–∞–ª—å—Ç–æ", "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ", "–ª–æ–ø–∞—Ç–∞",
            "–∫–æ—Ä–æ–º—ã—Å–ª–æ", "–ª–µ–æ–ø–∞—Ä–¥"
    };

    /**
     * —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞
     * @return —Å–ª–æ–≤–æ
     */
    public static String generateWord() {
        return words[(int) (Math.random() * words.length)];
    }

    /**
     * –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    public static void play() {
        Hangman currentGame;
        while (!ext) {
            String word = generateWord();
            currentGame = new Hangman(word);
            currentGame.play();
            GameChoicer.again();
        }
    }

    /**
     * –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
     */
    @Override
    public void playGame() {
        printProgress();
        Scanner scanner = new Scanner(System.in);
        while (true) {
            String input = scanner.nextLine().toLowerCase();
            if (input.length() != 1 || !Character.isLetter(input.charAt(0))) {
                System.out.print("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ");
            } else {
                char userVariant = input.charAt(0);
                if (mistakes.contains(userVariant) || progress.contains(userVariant)) {
                    System.out.println("–≠—Ç–∞ –±—É–∫–≤–∞ —É–∂–µ –±—ã–ª–∞");
                    System.out.print("–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ");
                } else {
                    if (checkGuess(userVariant)) {
                        System.out.print("–ü—Ä–∞–≤–∏–ª—å–Ω–æ! ");
                        if (!progress.contains(HIDDEN_WORD)) {
                            System.out.println("–í—ã –≤—ã–π–≥—Ä–∞–ª–∏!");
                            ext = true;
                            break;
                        }
                    } else {
                        System.out.print("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ! ");
                        mistakes.add(userVariant);
                        if (--lives == 0) {
                            System.out.println("\n–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏...");
                            ext = true;
                            break;
                        }
                    }
                    printProgress();
                }
            }
        }
        System.out.println("–≠—Ç–æ –±—ã–ª–æ —Å–ª–æ–≤–æ: " + secret.toUpperCase());
    }

    /**
     * –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–µ
     * @param userVariant –±—É–∫–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true, –µ—Å–ª–∏ –±—É–∫–≤–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ false
     */
    private boolean checkGuess(char userVariant) {
        boolean guessed = false;
        for (int index = secret.indexOf(userVariant); index >= 0; index = secret.indexOf(userVariant, index + 1)) {
            progress.set(index, userVariant);
            guessed = true;
        }
        return guessed;
    }

    /**
     * –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∂–∏–∑–Ω–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –±—É–∫–≤—ã
     */
    private void printProgress() {
        System.out.print("–°–ª–æ–≤–æ:");
        for (char letter : progress) {
            System.out.print(" " + letter);
        }
        System.out.print("\n–ñ–∏–∑–Ω–∏: ");
        for (int i = 0; i < lives; i++) {
            System.out.print("üíô");
        }
        System.out.print("\n\n\n–í–≤–µ–¥–∏—Ç–µ –±—É–∫–≤—É: ");
    }
}
