package Games;


import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

import static Messeges.OutputMessages.*;
import static java.lang.System.*;

/**
 * –í–∏—Å–µ–ª–∏—Ü–∞
 */
public class Hangman implements Game {
    /**
     * –º–∞—Å–∫–∞ —Å–∫—Ä—ã—Ç–æ–≥–æ —Å–ª–æ–≤–∞
     */
    private static final char hiddenWordMask = '_';
    /**
     * —Ñ–ª–∞–≥ –≤—ã—Ö–æ–¥–∞ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
     */
    private static boolean exitFlag = false;
    /**
     * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∂–∏–∑–Ω–µ–π
     */
    private int lives = 5;
    /**
     * —Å–∫—Ä—ã—Ç–æ–µ —Å–ª–æ–≤–æ
     */
    private final String hiddenWord;
    /**
     * –ø—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–≥–∞–¥—ã–≤–∞–Ω–∏—è —Å–ª–æ–≤–∞
     */
    private final List<Character> progress;
    /**
     * mistakes- –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –±—É–∫–≤—ã
     */
    private final List<Character> mistakes;

    /**
     * –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä
     *
     * @param word –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
     */
    public Hangman(String word) {
        hiddenWord = word.toLowerCase();
        progress = new ArrayList<>();
        for (int i = 0; i < hiddenWord.length(); i++) {
            progress.add(hiddenWordMask);
        }
        mistakes = new ArrayList<>();
    }

    /**
     * –Ω–∞–±–æ—Ä —Å–ª–æ–≤ –¥–ª—è –∏–≥—Ä—ã
     */
    private static final String[] wordsEasy = {
            "–ø–∞–ª—å—Ç–æ", "–ª–æ–ø–∞—Ç–∞",
            "–∑–µ–±—Ä–∞", "–º–∞–≥–∞–∑–∏–Ω"
    };
    private static final String[] wordsMedium = {
            "–∫–æ—Ä–æ–º—ã—Å–ª–æ", "–ª–µ–æ–ø–∞—Ä–¥", "–Ω–æ—É—Ç–±—É–∫", "–∫–æ–Ω—Ñ–µ—Ç–∞", "—Ç–µ–ª–µ—Ñ–æ–Ω"
    };
    private static final String[] wordsHard = {
            "–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ",
            "–∫–æ—Ä–æ–º—ã—Å–ª–æ", "–≤–ª—é–±–ª—ë–Ω–Ω–æ—Å—Ç—å",
            "—Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥", "—á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ"
    };

    /**
     * —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Å–ª–æ–≤–∞
     *
     * @return —Å–ª–æ–≤–æ
     */
    public static String generateWord(String difficult) {
        return switch (difficult) {
            case ("1") -> wordsEasy[(int) (Math.random() * wordsEasy.length)];
            case ("2") -> wordsMedium[(int) (Math.random() * wordsMedium.length)];
            case ("3") -> wordsHard[(int) (Math.random() * wordsHard.length)];
            default -> throw new IllegalStateException("Unexpected value: " + difficult);
        };
    }

    /**
     * –∑–∞–ø—É—Å–∫ –∏–≥—Ä—ã
     */
    public static void start() {
//        String difficult = chooseDifficulty();
        String difficult = "1";
        Hangman currentGame;
        String word = generateWord(difficult);
        while (!exitFlag) {
            currentGame = new Hangman(word);
            currentGame.play();
        }
    }

    /**
     * –∏–≥—Ä–æ–≤–∞—è –ª–æ–≥–∏–∫–∞
     */
    @Override
    public void play() {
        printProgress();
        Scanner scanner = new Scanner(in);
        for (; ; ) {
            String input = scanner.nextLine().toLowerCase();
            if (checkCorrectInput(input)) break;
        }
        out.println(ANSWER.getOutput() + hiddenWord.toUpperCase() + "\n");
        exitFlag = false;

    }

    private boolean checkCorrectInput(String input) {
        if (input.length() == 1 && Character.isLetter(input.charAt(0))) {
            char userVariant = input.charAt(0);
            return checkInput(userVariant);
        } else {
            out.print(INPUT.getOutput());
        }
        return false;
    }

    private boolean checkInput(char userVariant) {
        if (!mistakes.contains(userVariant) && !progress.contains(userVariant)) {
            return checkGuessCase(userVariant);
        } else {
            out.println(SAME.getOutput());
            out.print(INPUT.getOutput());
        }
        return false;
    }

    private boolean checkGuessCase(char userVariant) {
        if (checkGuess(userVariant)) {
            out.print(RIGHT.getOutput() + "\n");
            if (winCase()) return true;
        } else {
            out.print(WRONG.getOutput() + "\n");
            mistakes.add(userVariant);
            if (looseCase()) return true;
        }
        printProgress();
        return false;
    }

    private boolean looseCase() {
        if (--lives == 0) {
            out.println("\n" + LOOSE.getOutput());
            exitFlag = true;
            return true;
        }
        return false;
    }

    private boolean winCase() {
        if (!progress.contains(hiddenWordMask)) {
            out.println(WIN.getOutput());
            exitFlag = true;
            return true;
        }
        return false;
    }

    /**
     * –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª–∞ –≤ —Å–ª–æ–≤–µ
     *
     * @param userVariant –±—É–∫–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     * @return true, –µ—Å–ª–∏ –±—É–∫–≤–∞ –µ—Å—Ç—å, –∏–Ω–∞—á–µ false
     */
    private boolean checkGuess(char userVariant) {
        boolean guessed = false;
        for (int index = hiddenWord.indexOf(userVariant); index >= 0; index = hiddenWord.indexOf(userVariant, index + 1)) {
            progress.set(index, userVariant);
            guessed = true;
        }
        return guessed;
    }

    /**
     * –º–µ—Ç–æ–¥ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–ª–æ–≤–∞, –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∂–∏–∑–Ω–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –±—É–∫–≤—ã
     */
    private void printProgress() {
        out.print(WORD.getOutput());
        for (char letter : progress) {
            out.print(" " + letter);
        }
        out.print("\n" + LIFE.getOutput());
        for (int i = 0; i < lives; i++) {
            out.print("üíô");
        }
        out.print("\n\n\n" + INPUT.getOutput());
    }
}